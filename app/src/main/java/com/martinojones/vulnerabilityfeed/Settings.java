package com.martinojones.vulnerabilityfeed;

import android.content.SharedPreferences;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.Toast;

import java.util.Map;

public class Settings extends AppCompatActivity {

    private Spinner numOfVulns;
    private Spinner minimumCVE;
    public static final String PREFS_NAME = "MyPrefsFile";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_settings);

        // Restore preferences
        final SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
        final SharedPreferences.Editor editor = settings.edit();

        //Assign UI elements
        numOfVulns = (Spinner) findViewById(R.id.numberOfVulns);
        Button saveButton = (Button) findViewById(R.id.savebutton);
        minimumCVE = (Spinner) findViewById(R.id.minCVE);
        Button clearAllSavedVulnerabilities = (Button) findViewById(R.id.clearSaved);

        //Setup number of vulnerabilities spinner
        String[] items = new String[]{"5", "10", "15", "20", "25", "30"};
        ArrayAdapter<String> numOfVulnsAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item, items);
        numOfVulns.setAdapter(numOfVulnsAdapter);

        //Setup minCVE Spinner
        String[] cveNumbers = new String[]{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
        ArrayAdapter<String> minCVE = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item, cveNumbers);
        minimumCVE.setAdapter(minCVE);


        //Set UI elements
        for(int i = 0; i < minimumCVE.getCount(); i ++)
        {
            if(minimumCVE.getItemAtPosition(i).toString().equals(settings.getString("MINCVE", "0")))
            {
                minimumCVE.setSelection(i);
            }
        }

        for(int i = 0; i < numOfVulns.getCount(); i ++)
        {
            if(numOfVulns.getItemAtPosition(i).toString().equals(settings.getString("SHOWVULNS", "30")))
            {
                numOfVulns.setSelection(i);
            }
        }

        //Save button
        saveButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //Save the UI elements
                MainActivity.minCVE = minimumCVE.getSelectedItem().toString();
                MainActivity.savedNumOfVulns = numOfVulns.getSelectedItem().toString();

                editor.putString("MINCVE", minimumCVE.getSelectedItem().toString());
                editor.putString("SHOWVULNS", numOfVulns.getSelectedItem().toString());
                editor.commit();

                finish();
            }
        });

        //Clear all saved vulnerabilities
        clearAllSavedVulnerabilities.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                Map<String, ?> allEntries = settings.getAll();
                for (Map.Entry<String, ?> entry : allEntries.entrySet()) {
                    Log.d("map values", entry.getKey() + ": " + entry.getValue().toString());

                    if(entry.getValue().toString().contains("CVE"))
                    {
                        editor.remove(entry.getKey());
                    }


                }

                editor.commit();

                Toast.makeText(getApplicationContext(), "Cleared ALL saved vulnerabilities", Toast.LENGTH_SHORT).show();
            }
        });


    }
}
