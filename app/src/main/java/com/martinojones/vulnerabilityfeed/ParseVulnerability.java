package com.martinojones.vulnerabilityfeed;

import android.util.Log;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;

import java.io.StringReader;
import java.util.ArrayList;

/**
 * Created by marti on 6/14/2016.
 */
public class ParseVulnerability {
    private String xmlData;
    private ArrayList<Vulnerability> Vulnerabilitys;

    public ParseVulnerability(String xmlData) {
        this.xmlData = xmlData;
        Vulnerabilitys = new ArrayList<>();
    }

    public ArrayList<Vulnerability> getVulnerabilitys() {
        return Vulnerabilitys;
    }

    public boolean process()
    {
        boolean status = true;
        Vulnerability currentRecord = null;
        boolean inEntry = false;
        String textValue = "";

        try
        {
            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
            factory.setNamespaceAware(true);
            XmlPullParser xpp = factory.newPullParser();
            xpp.setInput(new StringReader(this.xmlData));
            int eventType = xpp.getEventType();

            while(eventType != XmlPullParser.END_DOCUMENT)
            {
                String tagName = xpp.getName();
                switch(eventType)
                {
                    case XmlPullParser.START_TAG:
                        if(tagName.equalsIgnoreCase("item"))
                        {
                            inEntry = true;
                            currentRecord = new Vulnerability();
                        }
                        break;

                    case XmlPullParser.TEXT:
                        textValue = xpp.getText();
                        break;

                    case XmlPullParser.END_TAG:
                        if(inEntry)
                        {
                            if(tagName.equalsIgnoreCase("item"))
                            {
                                Vulnerabilitys.add(currentRecord);
                                inEntry = false;
                            }
                            else if(tagName.equalsIgnoreCase("title"))
                            {
                                currentRecord.setName(textValue);
                            }
                            else if (tagName.equalsIgnoreCase("description"))
                            {
                                currentRecord.setDescription(textValue);
                            }
                            else if (tagName.equalsIgnoreCase("pubDate"))
                            {
                                currentRecord.setDate(textValue);
                            }
                            else if(tagName.equalsIgnoreCase("link"))
                            {
                                currentRecord.setUrl(textValue);
                            }
                        }
                        break;

                    default:
                        //Nothing to do
                }

                eventType = xpp.next();
            }

        }
        catch(Exception ex)
        {
            status = false;
            ex.printStackTrace();
        }
        for(Vulnerability app : Vulnerabilitys)
        {
            Log.d("ParseVulnerabilitys",app.getName());
        }
        return true;
    }
}
