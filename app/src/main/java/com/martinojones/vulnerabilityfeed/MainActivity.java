package com.martinojones.vulnerabilityfeed;

import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.Toast;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class MainActivity extends AppCompatActivity {

    private String mFileContents;
    private Button btnParse;
    public static ListView listView;
    private DownloadData downloadData = new DownloadData();
    private String DOWNLOADURL = "https://www.cvedetails.com/vulnerability-feed.php?vendor_id=0&product_id=0&version_id=0&orderby=1&cvssscoremin=0";


    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        try
        {
            downloadData.execute(DOWNLOADURL);
        }
        catch(Exception ex)
        {
            Toast.makeText(getApplicationContext(), "Unable to grab latest vulnerabilities.", Toast.LENGTH_SHORT).show();
        }

        btnParse = (Button) findViewById(R.id.btn_pass);
        listView = (ListView) findViewById(R.id.xmlListView);


        //Add listeners
        btnParse.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                parseXML();
            }
        });

        listView.setOnItemClickListener(new AdapterView.OnItemClickListener()
        {
            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int position, long arg3)
            {

                Intent intent = new Intent(getApplicationContext(), Details.class);
                intent.putExtra("URL", ((Vulnerability)arg0.getItemAtPosition(position)).getUrl());
                intent.putExtra("CVE", ((Vulnerability)arg0.getItemAtPosition(position)).getName());
                intent.putExtra("DESC", ((Vulnerability)arg0.getItemAtPosition(position)).getDescription());
                startActivity(intent);

                //setContentView(R.layout.details);
                /*
                String data = ((Vulnerability)arg0.getItemAtPosition(position)).getUrl();

                if(data != null)
                {
                    Uri uriUrl = Uri.parse(data);
                    Intent launchBrowser = new Intent(Intent.ACTION_VIEW, uriUrl);
                    startActivity(launchBrowser);
                }
                */
            }
        });

        //Parse the XML
        parseXML();
    }

    private void parseXML()
    {
        //Try to download the XML data
        try
        {
            downloadData.execute(DOWNLOADURL);
        }
        catch(Exception ex)
        {

        }

        //Sleep to give time for the XML to download
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {

        }

        //Parse the XML if not null
        if(mFileContents == null)
        {
            Toast.makeText(getApplicationContext(), "Data took too long to download. Try the refresh button", Toast.LENGTH_SHORT).show();
        }
        else
        {
            ParseVulnerability pV = new ParseVulnerability(mFileContents);
            pV.process();
            ArrayAdapter<Vulnerability> arrayAdapter = new ArrayAdapter<Vulnerability>(
                    MainActivity.this,R.layout.list_item, pV.getVulnerabilitys());
            listView.setAdapter(arrayAdapter);
        }
    }



    private class DownloadData extends AsyncTask<String, Void, String>
    {

        @Override
        protected String doInBackground(String... params)
        {
            mFileContents = downloadXMLFile(params[0]);
            if(mFileContents == null)
            {
                Log.d("DownloadData", "Error downloading");
            }

            return mFileContents;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            Log.d("DownloadData", "Result was: " + s);
        }

        private String downloadXMLFile(String urlPath)
        {
            StringBuilder tempBuffer = new StringBuilder();

            try
            {
                URL url = new URL(urlPath);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                int response = connection.getResponseCode();
                Log.d("DownloadData", "The response code was: " + response);

                InputStream is = connection.getInputStream();
                InputStreamReader isr = new InputStreamReader(is);

                int charRead;
                char[] inputBuffer = new char[500];

                while(true)
                {
                    charRead = isr.read(inputBuffer);
                    if(charRead <= 0)
                    {
                        break;
                    }
                    tempBuffer.append(String.copyValueOf(inputBuffer,0,charRead));
                }

                return tempBuffer.toString();
            }
            catch(IOException ex)
            {
                Toast.makeText(getApplicationContext(), "Data took too long to download. Try the refresh button", Toast.LENGTH_SHORT).show();
                Log.d("DownloadData", "IO Exception reading data: " + ex.getMessage());
            }
            catch(java.lang.SecurityException e)
            {
                Log.d("DownloadData", "Security exception!");
            }

            return null;
        }

    }
}
