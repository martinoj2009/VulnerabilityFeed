package com.martinojones.vulnerabilityfeed;

import android.content.SharedPreferences;
import android.net.Uri;
import android.util.Log;
import android.widget.ArrayAdapter;
import android.widget.ListView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by dev on 17/02/2016.
 */
public class GetVulnerabilities extends GetRawData {

    private String LOG_TAG = GetVulnerabilities.class.getSimpleName();
    private List<Vulnerability> vulnerabilityList;
    private Uri mDestinationUri;
    private boolean done = false;
    private String showNumberOfVulns;
    private String minCVE;
    String CVEDETAILS_URL;



    public GetVulnerabilities(String numVulns, String cveNumber) {
        super(null);

        this.showNumberOfVulns = numVulns;
        this.minCVE = cveNumber;

        Log.d("VULNERABILITIES", "VULNS: " + numVulns);
        vulnerabilityList = new ArrayList<>();

        //Make URL
        CVEDETAILS_URL = "http://www.cvedetails.com/json-feed.php?numrows=" + showNumberOfVulns + "&vendor_id=0&product_id=0&version_id=0&hasexp=0&opec=0&opov=0&opcsrf=0&opfileinc=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opginf=0&opdos=0&orderby=1&cvssscoremin=" + minCVE;
        mDestinationUri = Uri.parse(CVEDETAILS_URL);
    }

    public void execute() {
        super.setmRawUrl(mDestinationUri.toString());
        DownloadJsonData downloadJsonData = new DownloadJsonData();
        Log.v(LOG_TAG, "Built URI = " + mDestinationUri.toString());
        downloadJsonData.execute(mDestinationUri.toString());

    }


    public void processResult() {
        if(getmDownloadStatus() != DownloadStatus.OK) {
            Log.e(LOG_TAG, "Error downloading raw file");
            return;
        }

        final String cveID = "cve_id";
        final String cveSummary = "summary";
        final String pubDate = "publish_date";
        final String cvsScore = "cvss_score";
        final String vulURL = "url";
        final String exploitCount = "exploit_count";


        try {

            JSONArray itemsArray = new JSONArray(getmData());

            vulnerabilityList.clear();

            for(int i=0; i<itemsArray.length(); i++) {

                JSONObject jsonVulnerability = itemsArray.getJSONObject(i);
                String title = jsonVulnerability.getString(cveID);
                String summary = jsonVulnerability.getString(cveSummary);
                String pDate = jsonVulnerability.getString(pubDate);
                String url = jsonVulnerability.getString(vulURL);
                float score = Float.parseFloat(jsonVulnerability.getString(cvsScore));
                String exCount = jsonVulnerability.getString(exploitCount);

                vulnerabilityList.add(new Vulnerability(title, summary, pDate, url, score, exCount));
            }

        } catch(JSONException jsone) {
            jsone.printStackTrace();
            Log.e(LOG_TAG, "Error processing Json data");
        }


        Log.e(LOG_TAG, "DONE processing vulnerabilities. " + Boolean.toString(done));

    }

    public class DownloadJsonData extends DownloadRawData {

        protected void onPostExecute(String webData) {
            super.onPostExecute(webData);
            processResult();

        }

        protected String doInBackground(String... params) {
            return super.doInBackground(params);
        }

    }

    public List<Vulnerability> getVulnerabilities()
    {
        return vulnerabilityList;
    }

    public boolean getDone()
    {
        return this.done;
    }

    public void clearVulns()
    {
        this.vulnerabilityList.clear();
    }

}